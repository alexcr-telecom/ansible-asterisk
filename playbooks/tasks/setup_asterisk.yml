#- name: install linux linux-headers
#  action: shell apt-get install -y linux-headers-$(uname -r)
#  ignore_errors: True
#  tags:
  
- name: Install asterisk pre-requisites via apt
  apt: pkg={{ item }}
  sudo: yes
  with_items:
    - build-essential
    - wget
    - libssl-dev
    - libncurses5-dev
    - libnewt-dev
    - libxml2-dev
#    - linux-headers-${ansible_kernel}
    - libsqlite3-dev
    - uuid-dev
    - make
    - bison
    - flex
    - g++
    - gcc
    - php5
    - php5-curl
    - php5-cli
    - php5-mysql
    - php-pear
    - php-db
    - php5-gd
    - curl
    - sox
    - libsox-fmt-all
    - libncurses5-dev
    - libssl-dev
    - libmysqlclient15-dev
    - mpg123
    - unixodbc
    - unixodbc-dev
    - libmyodbc
    - subversion
    - git
    - fail2ban
    - libxml2
    - libxml2-dev
    - sqlite3
    - libsqlite3-dev
    - libnewt-dev
    - uuid-dev
    - libcurl4-openssl-dev
    - libsrtp0
    - libsrtp0-dev
    - libportaudio-dev
    - libportaudio0
    - libassuan0
    - libelfg0
    - libglib2.0-bin
    - libglib2.0-dev
    - libgmime-2.6-0
    - libgmime-2.6-dev
    - libgpgme11
    - libpcre3-dev
    - libpcrecpp0
    - libspandsp-dev
    - libspandsp2
    - libiksemel-dev
    - libiksemel3
    - libiksemel-utils

- name: Remove existing tarball
  file: "path={{ libpri_tarball }} state=absent"
- name: Remove existing tarball
  file: "path={{ dahdi_tarball }} state=absent"
- name: Remove existing tarball
  file: "path={{ asterisk_tarball }} state=absent"
  
- name: Download asterisk dahdi libpri tarball
  get_url: "url={{ libpri_url }} dest={{ libpri_tarball }}"
- name: Download asterisk dahdi libpri tarball
  get_url: "url={{ dahdi_url }} dest={{ dahdi_tarball }}"
- name: Download asterisk dahdi libpri tarball
  get_url: "url={{ asterisk_url }} dest={{ asterisk_tarball }}"
  
- name: Remove existing install source dir
  file: "path={{ libpri_srcdir }} state=absent"
- name: Remove existing install source dir
  file: "path={{ dahdi_srcdir }} state=absent"
- name: Remove existing install source dir
  file: "path={{ asterisk_srcdir }} state=absent"
  
- name: Create install dir
  file: "path={{ libpri_srcdir }} state=directory"
- name: Create install dir
  file: "path={{ dahdi_srcdir }} state=directory"
- name: Create install dir
  file: "path={{ asterisk_srcdir }} state=directory"
  
- name: Unpack tarball
  command: "tar -xzf {{ libpri_tarball }} -C {{ libpri_srcdir }} --strip-components=1"
- name: Unpack tarball
  command: "tar -xzf {{ dahdi_tarball }} -C {{ dahdi_srcdir }} --strip-components=1"
- name: Unpack tarball
  command: "tar -xzf {{ asterisk_tarball }} -C {{ asterisk_srcdir }} --strip-components=1"


- name: Build Dahdi from tarball
  command: "{{ item }} chdir={{ dahdi_srcdir }}"
  with_items:
    - make
    - make install
    - make config

- name: restart dahdi
  service: name=dahdi state=restarted
  sudo: yes


- name: Build LibPRI from tarball
  command: "{{ item }} chdir={{ libpri_srcdir }}"
  with_items:
    - make
    - make install


#- name: Get mp3 source
#  shell:
#    ./configure && ./contrib/scripts/get_mp3_source.sh
#    chdir={{ asterisk_src_dir.stdout }}
#  tags: asterisk

- name: Copy menuselect.makeopts file
  template:
    src: menuselect.makeopts.j2
    dest: "{{ asterisk_srcdir }}/menuselect.makeopts"
  tags: asterisk


- name: Build Asterisk from tarball
  command: "{{ item }} chdir={{ asterisk_srcdir }}"
  with_items:
    - ./configure
    - make menuselect.makeopts
#    - sed -i -e 's/res_snmp//' menuselect.makeopts
#    - sed -i -e 's/chan_sip//' menuselect.makeopts
#    - sed -i -e 's/res_http_websocket//' menuselect.makeopts
    - make
#    - make uninstall
    - make install
    - make config
    - make samples
    - make install-logrotate

- name: Gen CONFIG for DAHDI
  command: dahdi_genconf chdir={{ dahdi_srcdir }}
  sudo: yes

- name: Gen CONFIG for DAHDI
  command: dahdi_cfg chdir={{ dahdi_srcdir }}
  sudo: yes


#- name: Download asterisk sounds (ulaw format)
#  get_url: "url={{ asterisk_url_sounds }} dest={{ asterisk_path_soundstarball }}"

#- name: Create install dir
#  file: "path={{ asterisk_srcdir }} state=directory"

#- name: Unpack sounds
#  command: "tar -xzf {{ asterisk_path_soundstarball }} -C {{ asterisk_path_sound }}"

